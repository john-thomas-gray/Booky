services:
    - docker:dind

stages:
    - test
    - build
    - deploy

variables:
    EC2_HOST: "52.53.210.104"

# Run flake8 to check for code quality
# And also optionally run unit tests

tests:
    image: python:3-bullseye
    stage: test
    script:
        - pip install flake8
        - flake8 api
        # Run unit tests
        - cd api
        - pip install -r requirements.txt
        - python -m pytest
    variables:
        DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
        SIGNING_KEY: "305749480eaabb889374b793b40c597f0d2e7ef6f773c300a6bdd41066f34c2d"
        GOOGLE_BOOKS_API_KEY: "${GOOGLE_BOOKS_API_KEY}"
# # Build API Image:
# # This job builds the API docker image and pushes it to the GitLab docker registry
# # When this job finishes you will need to use the glv-cloud-cli reset command
# # To deploy the new image
build-api-image:
    stage: build
    image: docker:git
    needs:
        - tests
    variables:
        GITLAB_IMAGE: ${CI_REGISTRY_IMAGE}/api
    before_script:
        # $CI_JOB_TOKEN is variable automatically added by Gitlab: see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#variables-reference
        - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
    script:
        - docker build --tag $GITLAB_IMAGE:latest ./api
        - docker push $GITLAB_IMAGE:latest
    only:
        - main

# # Build the React/JavaScript front-end
build-front-end-job:
    stage: build
    image: node:lts-bullseye
    needs:
        - tests
    variables:
        # If either of these variables is defined in the GitLab
        # CI/CD variables, that value will override the value here.
        # You need to substitute in your real values for
        # GROUP_NAME, PROJECT_NAME, & WEBSERVICE_NAME below.
        # Don't forget to also replace PROJECT NAME in the npm run build line as well
        VITE_API_HOST: https://bookingforbooky.com
    script:
        - cd ghi
        - npm install
        - npm run lint
        - npm run build -- --base=/Booky/
        # The following line creates a _redirects file to redirect all URLs to index.html
        # Documentation: https://docs.gitlab.com/ee/user/project/pages/redirects.html#rewrite-all-requests-to-a-root-indexhtml
        - echo "/* /index.html 200" > dist/_redirects
    artifacts:
        paths:
            - ghi/dist/

# Deploy the React/JavaScript front-end to GitLab pages
pages:
    stage: deploy
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    dependencies:
        - build-front-end-job
    needs:
        - build-front-end-job
    script:
        - mv ghi/dist/ public
    artifacts:
        paths:
            - public

deploy-to-ec2:
    stage: deploy
    image: docker:26.1.2 # Use an image with Docker pre-installed
    variables:
        GITLAB_IMAGE: ${CI_REGISTRY_IMAGE}/api
        DATABASE_URL: "postgresql://$PG_USER:$PG_PASSWORD@postgres.c70cc042grus.us-west-1.rds.amazonaws.com/postgres"
        SIGNING_KEY: "305749480eaabb889374b793b40c597f0d2e7ef6f773c300a6bdd41066f34c2d"
    before_script:
        - apk add --no-cache openssh-client
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - || (echo "Failed to add SSH key" && exit 1)
        - mkdir -p ~/.ssh
        - chmod 700 ~/.ssh
        - echo "StrictHostKeyChecking no" > ~/.ssh/config
        - ssh-keyscan $EC2_HOST >> ~/.ssh/known_hosts || (echo "Failed to ssh-keyscan" && exit 1)
    script:
        - echo "$GITLAB_IMAGE" || (echo "Failed to output" && exit 1)
        - echo "$GITLAB_IMAGE:latest" || (echo "Failed to output" && exit 1)
        - echo "$DATABASE_URL" || (echo "Failed to output" && exit 1)
        - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin || (echo "Failed to login to Docker registry" && exit 1)
        - ssh -v ubuntu@$EC2_HOST "docker pull $GITLAB_IMAGE:latest" || (echo "Failed to pull Docker image" && exit 1)
        - ssh -v ubuntu@$EC2_HOST "docker stop my-api || true && docker rm my-api || true" || (echo "Failed to stop and remove container" && exit 1)
        - ssh -v ubuntu@$EC2_HOST "docker run -d --name my-api -e DATABASE_URL=$DATABASE_URL -p 80:80 $GITLAB_IMAGE" || (echo "Failed to run Docker container" && exit 1)
    only:
        - main
